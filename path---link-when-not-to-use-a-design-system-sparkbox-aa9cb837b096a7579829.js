webpackJsonp([0x9f04fabe7b26],{1111:function(e,t){e.exports={data:{nodePost:{title:"When NOT to Use a Design System - Sparkbox",link:"https://seesparkbox.com/foundry/when_not_to_use_a_design_system",body:{value:'<blockquote>\r\n<p>Sometimes, a CMS gets built and the work is done. It gets used by content editors and is occasionally upgraded, but the development team and budgets are reallocated to other priorities, and the world moves on. This pattern is especially common with time-sensitive projects (event websites, marketing campaigns, etc.).</p>\r\n<p>Design systems don’t make sense here because a design system demonstrates its value in times of active development. It’s when a designer is working on a new notification message and needs to know what colors to use. Or when a developer is building a new form and needs to see what field types already exist.</p>\r\n<p>If you don’t anticipate a lot of new development on a project, then a robust design system may not make sense.</p>\r\n</blockquote>\r\n<p>Had some related discussion in <a href="https://www.youtube.com/watch?v=xXt3v3FSxss&feature=youtu.be&t=42m42s">the Q&A during during my UI Patterns session at Texas Camp</a> this weekend - specifically on the actual value of creating an external pattern library in a typical Drupal project. I\'m a believer that even just the opportunities to decouple front end and backend efforts can be worth the effort in many projects, but I also agree that you need to sensible in the amount of effort that gets invested into the pattern library. If the pattern library starts to feel like its own product, you might be going overboard. This post encapsulates those concerns pretty nicely.</p>'},relationships:{image:null},created:1528125619}},pathContext:{slug:"/link/when-not-to-use-a-design-system-sparkbox/"}}}});
//# sourceMappingURL=path---link-when-not-to-use-a-design-system-sparkbox-aa9cb837b096a7579829.js.map