{"version":3,"sources":["webpack:///path---6-e3485c8cfee26abc5b14.js","webpack:///./.cache/json/6.json"],"names":["webpackJsonp","1106","module","exports","pathContext","group","node","id","title","link","body","value","relationships","image","fields","slug","post_type","created","pathPrefix","first","last","index","pageCount","additionalContext"],"mappings":"AAAAA,cAAc,iBAERC,KACA,SAAUC,EAAQC,GCHxBD,EAAAC,SAAkBC,aAAeC,QAAUC,MAAQC,GAAA,uCAAAC,MAAA,0CAAAC,KAAA,yEAAAC,MAAsLC,MAAA,y8CAAi9CC,eAAkBC,MAAA,MAAaC,QAAWC,KAAA,kDAAwDC,UAAA,OAAAC,QAAA,cAA4CX,MAAQC,GAAA,uCAAAC,MAAA,yBAAAC,KAAA,KAAAC,MAAiGC,MAAA,yhCAAkiCC,eAAkBC,MAAA,MAAaC,QAAWC,KAAA,iCAAuCC,UAAA,OAAAC,QAAA,cAA4CX,MAAQC,GAAA,uCAAAC,MAAA,6BAAAC,KAAA,iDAAAC,MAAiJC,MAAA,6gDAAohDC,eAAkBC,MAAA,MAAaC,QAAWC,KAAA,oCAA0CC,UAAA,OAAAC,QAAA,cAA4CX,MAAQC,GAAA,uCAAAC,MAAA,mDAAAC,KAAA,KAAAC,MAA2HC,MAAA,uuDAA+uDC,eAAkBC,MAAA,MAAaC,QAAWC,KAAA,2DAAiEC,UAAA,OAAAC,QAAA,cAA4CX,MAAQC,GAAA,uCAAAC,MAAA,iCAAAC,KAAA,KAAAC,MAAyGC,MAAA,wgBAAghBC,eAAkBC,MAAA,MAAaC,QAAWC,KAAA,yCAA+CC,UAAA,OAAAC,QAAA,cAA0CC,WAAA,GAAAC,OAAA,EAAAC,MAAA,EAAAC,MAAA,EAAAC,UAAA,EAAAC","file":"path---6-e3485c8cfee26abc5b14.js","sourcesContent":["webpackJsonp([161064502438360],{\n\n/***/ 1106:\n/***/ (function(module, exports) {\n\n\tmodule.exports = {\"pathContext\":{\"group\":[{\"node\":{\"id\":\"31a6c4f9-ad85-4fbe-a666-74f1b06c8da2\",\"title\":\"Accommodating Drupal In Your Components\",\"link\":\"https://www.mediacurrent.com/blog/accommodating-drupal-your-components\",\"body\":{\"value\":\"<blockquote>\\r\\nWhile Drupalers are rejoicing at these exciting advances allowing newfound front end freedoms, there are still a few hoops to be aware of in order to make the most of Drupal, especially for a newcomer who might be eager to shove aside a lot of what Drupal provides. ...things that are easily dismissed in a component-driven approach, like letting Drupal fully render fields, can cause headaches further on if they’re ignored, and make life difficult when it comes to keeping your front end forward-compatible with Drupal.\\r\\n</blockquote>\\r\\n\\r\\n<p>The UI Patterns module really does solve many of the problems outlined in this post, so my preference is to embrace that approach and leave these complicated presenter templates behind. But for those who haven’t embraced <a href=\\\"https://www.drupal.org/project/ui_patterns\\\">UI Patterns</a>, this post really is essential.</p>\\r\\n\\r\\n<p>When explaining some of the gotchas with this approach, I often use images as a simple example. Creating a component from scratch the instinct is often to pass in src and alt values as variables to get the cleanest markup possible. You can get that stuff out of Drupal, but it really is a pain. You’re better off just using the image markup Drupal renders, even if it isn't exactly as clean as you want it to be. Sometimes not fighting this battle at all is the right way to go. But if you want the perfect markup this post has everything you need to do it the right way.</p>\"},\"relationships\":{\"image\":null},\"fields\":{\"slug\":\"/link/accommodating-drupal-in-your-components/\"},\"post_type\":\"link\",\"created\":1519510711}},{\"node\":{\"id\":\"ade692cf-10ab-4868-837c-f3aa646f518d\",\"title\":\"CSS Tricks Rabbit Hole\",\"link\":null,\"body\":{\"value\":\"<p>Went down a bit of a CSS-Tricks rabbit hole over lunch today.</p>\\r\\n\\r\\n<p>Started with <a href=\\\"https://css-tricks.com/complexity/\\\">Complexity.</a> I've enjoyed all of the recent point / counterpoints about the increasing complexity of front end development. This is a nice summary.</p>\\r\\n\\r\\n<p>That led me to <a href=\\\"https://css-tricks.com/future-front-end-web-development/\\\">The Future of Front End Web Development</a>. Totally agree with everything in there, maybe with the exception of 'the line between native and web is blurring.' I'd probably just put that one in the future-future of front end web development category. Not quite there yet, but looking forward to when it is more of a reality.</p>\\r\\n\\r\\n<p>And then that led me to <a href=\\\"https://css-tricks.com/project-need-react/\\\">When Does a Project Need React.</a> The more comfortable I become with how state is managed in a framework like React, the more insane our old jQuery tricks to jam state into the DOM seem.  That said, not all projects have complex state.</p>\"},\"relationships\":{\"image\":null},\"fields\":{\"slug\":\"/note/css-tricks-rabbit-hole/\"},\"post_type\":\"note\",\"created\":1519503565}},{\"node\":{\"id\":\"41620f96-21d8-4128-b0d0-70f4d77ec6c8\",\"title\":\"R U Talkin' R.E.M. RE: ME?\",\"link\":\"http://www.earwolf.com/show/u-talkin-u2-to-me/\",\"body\":{\"value\":\"<p>It's very hard to explain why, but I consider '<a href=\\\"http://www.earwolf.com/show/u-talkin-u2-to-me/\\\">U Talkin' U2 2 Me?</a>' to be the greatest podcast of all time. Possibly just one of my favorite <em>things</em> of all time. I don't like U2 all that much, yet somehow hearing Scott and Scott break down U2's entire discography over 24 episodes was something I saved for special occasions and often laughed to the point of tears while listening to. And boy, did they ever spend a lot of time talking about the band U2 (not really.)  They even knew the names of every single member of the band. Truly encyclopedic knowledge.</p>\\r\\n\\r\\n<p>And now Scott and Scott are back with '<a href=\\\"http://www.earwolf.com/show/u-talkin-u2-to-me/\\\">R U Talkin' R.E.M. RE: ME?</a>' in which they explore the output of the band R.E.M in what I'm sure will be painstaking detail. I like R.E.M. more than I like U2, but I can't say I would ever want to go through their entire back catalog. Yet somehow here we are again, and I'm excited to hear all about the album Monster. Listening today was just like old times. Can't wait to save for long road trips and laugh to the point of nearly driving off the road.</p>\\r\\n\\r\\n <p>If you're looking for more info on what the hell this is all about, this <a href=\\\"https://www.stereogum.com/1981761/talkin-to-scott-aukerman-re-u-talkin-r-e-m-re-me/franchises/interview/\\\">Stereogum interview</a> is as good a place as any. It might just confuse you more, which is par for the course.</p>\\r\\n\\r\\n<p>Good ep.</p>\"},\"relationships\":{\"image\":null},\"fields\":{\"slug\":\"/link/r-u-talkin'-r.e.m.-re:-me/\"},\"post_type\":\"link\",\"created\":1519265586}},{\"node\":{\"id\":\"f8c05988-e9df-4d5c-bd3f-e1a2b6011cb1\",\"title\":\"Decoupled Drupal Dumb Problems: Malformed Markup\",\"link\":null,\"body\":{\"value\":\"<p><a href=\\\"https://www.drupal.org/u/e0ipso\\\">Mateu</a> has many of the Decoupled Drupal <a href=\\\"https://www.lullabot.com/articles/decoupled-drupal-hard-problems-image-styles\\\">Hard</a> <a href=\\\"https://www.lullabot.com/articles/decoupled-hard-promblems-routing\\\">Problems</a> well covered, so I'll take care of one of the dumb ones.</p>\\r\\n\\r\\n<p>I noticed last weekend that the build was broken for this site - post switching on the homepage wasn't working, and as you scrolled down, posts started to be wrapped in the container for the previous post. I tried a new Gatsby build and saw the same thing. Next, I zeroed in on the post where content started overlapping and eventually noticed that I had some malformed markup in my post in Drupal - a missing closing quote for a href attribute. After updating the post to add the missing quote and doing another build, everything was fine again.</p>\\r\\n\\r\\n<p>You could chalk most of this up to me - if I was using a wysiwyg editor it would have added the correct link markup for me, and I should probably be taking a closer look at my build after it goes to GitHub Pages. But I think this hiccup was a nice reminder of the reality of these super sexy decoupled architectures. We lose a bit of the protection that Drupal provided us from something like malformed markup in a body field making a page explode.  Builds will break in ways that they didn't with Drupal alone - the site worked fine in development mode but broke when the production bundle was built. And while testing is always important, we likely need to test in ways that are different from when we were testing Drupal by itself.</p>\\r\\n\\r\\n<p>There are lessons to be learned even in the dumbest of problems. I'm sure I'll run into some more.</p>\"},\"relationships\":{\"image\":null},\"fields\":{\"slug\":\"/post/decoupled-drupal-dumb-problems:-malformed-markup/\"},\"post_type\":\"post\",\"created\":1519140479}},{\"node\":{\"id\":\"083c9991-1e9b-4aaa-bf51-1c57df383ea7\",\"title\":\"jQuery and Drupal 8.4 Upgrades\",\"link\":null,\"body\":{\"value\":\"<p>Learned the hard way recently that Drupal 8.4 upgrades jQuery to jQuery 3.  This kills a few methods that were deprecated in previous versions of jQuery including .load(), .unload(), .error(), and .size().  The <a href=\\\"https://www.drupal.org/project/drupal/releases/8.4.0\\\">release notes</a> cover this, but it didn't fully click until I actually ran into the issue.</p>\\r\\n<p>Related: is a minor release really a minor release if it contains major release upgrades for a couple of your largest dependencies?</p>\"},\"relationships\":{\"image\":null},\"fields\":{\"slug\":\"/note/jquery-and-drupal-8.4-upgrades/\"},\"post_type\":\"note\",\"created\":1519075633}}],\"pathPrefix\":\"\",\"first\":false,\"last\":false,\"index\":6,\"pageCount\":9,\"additionalContext\":{}}}\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// path---6-e3485c8cfee26abc5b14.js","module.exports = {\"pathContext\":{\"group\":[{\"node\":{\"id\":\"31a6c4f9-ad85-4fbe-a666-74f1b06c8da2\",\"title\":\"Accommodating Drupal In Your Components\",\"link\":\"https://www.mediacurrent.com/blog/accommodating-drupal-your-components\",\"body\":{\"value\":\"<blockquote>\\r\\nWhile Drupalers are rejoicing at these exciting advances allowing newfound front end freedoms, there are still a few hoops to be aware of in order to make the most of Drupal, especially for a newcomer who might be eager to shove aside a lot of what Drupal provides. ...things that are easily dismissed in a component-driven approach, like letting Drupal fully render fields, can cause headaches further on if they’re ignored, and make life difficult when it comes to keeping your front end forward-compatible with Drupal.\\r\\n</blockquote>\\r\\n\\r\\n<p>The UI Patterns module really does solve many of the problems outlined in this post, so my preference is to embrace that approach and leave these complicated presenter templates behind. But for those who haven’t embraced <a href=\\\"https://www.drupal.org/project/ui_patterns\\\">UI Patterns</a>, this post really is essential.</p>\\r\\n\\r\\n<p>When explaining some of the gotchas with this approach, I often use images as a simple example. Creating a component from scratch the instinct is often to pass in src and alt values as variables to get the cleanest markup possible. You can get that stuff out of Drupal, but it really is a pain. You’re better off just using the image markup Drupal renders, even if it isn't exactly as clean as you want it to be. Sometimes not fighting this battle at all is the right way to go. But if you want the perfect markup this post has everything you need to do it the right way.</p>\"},\"relationships\":{\"image\":null},\"fields\":{\"slug\":\"/link/accommodating-drupal-in-your-components/\"},\"post_type\":\"link\",\"created\":1519510711}},{\"node\":{\"id\":\"ade692cf-10ab-4868-837c-f3aa646f518d\",\"title\":\"CSS Tricks Rabbit Hole\",\"link\":null,\"body\":{\"value\":\"<p>Went down a bit of a CSS-Tricks rabbit hole over lunch today.</p>\\r\\n\\r\\n<p>Started with <a href=\\\"https://css-tricks.com/complexity/\\\">Complexity.</a> I've enjoyed all of the recent point / counterpoints about the increasing complexity of front end development. This is a nice summary.</p>\\r\\n\\r\\n<p>That led me to <a href=\\\"https://css-tricks.com/future-front-end-web-development/\\\">The Future of Front End Web Development</a>. Totally agree with everything in there, maybe with the exception of 'the line between native and web is blurring.' I'd probably just put that one in the future-future of front end web development category. Not quite there yet, but looking forward to when it is more of a reality.</p>\\r\\n\\r\\n<p>And then that led me to <a href=\\\"https://css-tricks.com/project-need-react/\\\">When Does a Project Need React.</a> The more comfortable I become with how state is managed in a framework like React, the more insane our old jQuery tricks to jam state into the DOM seem.  That said, not all projects have complex state.</p>\"},\"relationships\":{\"image\":null},\"fields\":{\"slug\":\"/note/css-tricks-rabbit-hole/\"},\"post_type\":\"note\",\"created\":1519503565}},{\"node\":{\"id\":\"41620f96-21d8-4128-b0d0-70f4d77ec6c8\",\"title\":\"R U Talkin' R.E.M. RE: ME?\",\"link\":\"http://www.earwolf.com/show/u-talkin-u2-to-me/\",\"body\":{\"value\":\"<p>It's very hard to explain why, but I consider '<a href=\\\"http://www.earwolf.com/show/u-talkin-u2-to-me/\\\">U Talkin' U2 2 Me?</a>' to be the greatest podcast of all time. Possibly just one of my favorite <em>things</em> of all time. I don't like U2 all that much, yet somehow hearing Scott and Scott break down U2's entire discography over 24 episodes was something I saved for special occasions and often laughed to the point of tears while listening to. And boy, did they ever spend a lot of time talking about the band U2 (not really.)  They even knew the names of every single member of the band. Truly encyclopedic knowledge.</p>\\r\\n\\r\\n<p>And now Scott and Scott are back with '<a href=\\\"http://www.earwolf.com/show/u-talkin-u2-to-me/\\\">R U Talkin' R.E.M. RE: ME?</a>' in which they explore the output of the band R.E.M in what I'm sure will be painstaking detail. I like R.E.M. more than I like U2, but I can't say I would ever want to go through their entire back catalog. Yet somehow here we are again, and I'm excited to hear all about the album Monster. Listening today was just like old times. Can't wait to save for long road trips and laugh to the point of nearly driving off the road.</p>\\r\\n\\r\\n <p>If you're looking for more info on what the hell this is all about, this <a href=\\\"https://www.stereogum.com/1981761/talkin-to-scott-aukerman-re-u-talkin-r-e-m-re-me/franchises/interview/\\\">Stereogum interview</a> is as good a place as any. It might just confuse you more, which is par for the course.</p>\\r\\n\\r\\n<p>Good ep.</p>\"},\"relationships\":{\"image\":null},\"fields\":{\"slug\":\"/link/r-u-talkin'-r.e.m.-re:-me/\"},\"post_type\":\"link\",\"created\":1519265586}},{\"node\":{\"id\":\"f8c05988-e9df-4d5c-bd3f-e1a2b6011cb1\",\"title\":\"Decoupled Drupal Dumb Problems: Malformed Markup\",\"link\":null,\"body\":{\"value\":\"<p><a href=\\\"https://www.drupal.org/u/e0ipso\\\">Mateu</a> has many of the Decoupled Drupal <a href=\\\"https://www.lullabot.com/articles/decoupled-drupal-hard-problems-image-styles\\\">Hard</a> <a href=\\\"https://www.lullabot.com/articles/decoupled-hard-promblems-routing\\\">Problems</a> well covered, so I'll take care of one of the dumb ones.</p>\\r\\n\\r\\n<p>I noticed last weekend that the build was broken for this site - post switching on the homepage wasn't working, and as you scrolled down, posts started to be wrapped in the container for the previous post. I tried a new Gatsby build and saw the same thing. Next, I zeroed in on the post where content started overlapping and eventually noticed that I had some malformed markup in my post in Drupal - a missing closing quote for a href attribute. After updating the post to add the missing quote and doing another build, everything was fine again.</p>\\r\\n\\r\\n<p>You could chalk most of this up to me - if I was using a wysiwyg editor it would have added the correct link markup for me, and I should probably be taking a closer look at my build after it goes to GitHub Pages. But I think this hiccup was a nice reminder of the reality of these super sexy decoupled architectures. We lose a bit of the protection that Drupal provided us from something like malformed markup in a body field making a page explode.  Builds will break in ways that they didn't with Drupal alone - the site worked fine in development mode but broke when the production bundle was built. And while testing is always important, we likely need to test in ways that are different from when we were testing Drupal by itself.</p>\\r\\n\\r\\n<p>There are lessons to be learned even in the dumbest of problems. I'm sure I'll run into some more.</p>\"},\"relationships\":{\"image\":null},\"fields\":{\"slug\":\"/post/decoupled-drupal-dumb-problems:-malformed-markup/\"},\"post_type\":\"post\",\"created\":1519140479}},{\"node\":{\"id\":\"083c9991-1e9b-4aaa-bf51-1c57df383ea7\",\"title\":\"jQuery and Drupal 8.4 Upgrades\",\"link\":null,\"body\":{\"value\":\"<p>Learned the hard way recently that Drupal 8.4 upgrades jQuery to jQuery 3.  This kills a few methods that were deprecated in previous versions of jQuery including .load(), .unload(), .error(), and .size().  The <a href=\\\"https://www.drupal.org/project/drupal/releases/8.4.0\\\">release notes</a> cover this, but it didn't fully click until I actually ran into the issue.</p>\\r\\n<p>Related: is a minor release really a minor release if it contains major release upgrades for a couple of your largest dependencies?</p>\"},\"relationships\":{\"image\":null},\"fields\":{\"slug\":\"/note/jquery-and-drupal-8.4-upgrades/\"},\"post_type\":\"note\",\"created\":1519075633}}],\"pathPrefix\":\"\",\"first\":false,\"last\":false,\"index\":6,\"pageCount\":9,\"additionalContext\":{}}}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/json-loader!./.cache/json/6.json\n// module id = 1106\n// module chunks = 161064502438360"],"sourceRoot":""}